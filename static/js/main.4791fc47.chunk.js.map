{"version":3,"sources":["images/card8.png","images/cabana.png","images/corbel.png","images/ritrain.png","App.js","serviceWorker.js","Events.jsx","OnlineCourses.jsx","Home.jsx","Root.jsx","index.js"],"names":["module","exports","App","Boolean","window","location","hostname","match","Events","props","useState","events","setEvents","filteredEvents","setFilteredEvents","keyword","type","useEffect","axios","get","Date","now","then","response","data","temp","filter","event","title","toLowerCase","includes","console","log","map","className","ReactHtmlParser","overview","substring","class","event_date_formatted","id","event_type","registration","status","register_interest_email","link","getRegistration","OnlineEvents","courses","setCourses","filteredCourses","setFilteredCourses","course","src","course_image","url","time_to_complete","Home","setKeyword","setType","data-vf-js-masthead","style","backgroundImage","backgroundSize","backgroundPosition","minHeight","position","marginBottom","color","role","for","aria-labelledby","onChange","e","target","value","handleSearch","placeholder","handleSelect","marginTop","OnlineCourses","pathVariable","exact","path","component","Root","root","document","getElementById","ReactDOM","render","basename","process","navigator","serviceWorker","ready","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4791fc47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card8.c93e6d3b.png\";","module.exports = __webpack_public_path__ + \"static/media/cabana.b17839a4.png\";","module.exports = __webpack_public_path__ + \"static/media/corbel.c77ffae5.png\";","module.exports = __webpack_public_path__ + \"static/media/ritrain.5285ccde.png\";","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nfunction App() {\n\n  const [list, setList] = useState();\n  const query = `query {\n  nodeQuery(filter: {conditions: [{field: \"type\", value: [\"course\", \"online_event\"], operator: IN}, {field: \"status\", value: \"1\"}]}) {\n    count\n    entities{\n      entityLabel\n      entityBundle\n      ... on NodeCourse{\n        fieldSubtitle\n        fieldStartEndDate {\n          startDate\n          endDate\n        }\n        fieldTrainingType\n        fieldTimezone\n        fieldDuration\n        fieldParticipation\n        fieldRegistrationOpensDate {\n          date\n        }\n        fieldRegistrationDeadline {\n          date\n        }\n        fieldOverview {\n          value\n        }\n       fieldVenue {\n         langcode\n         countryCode\n         administrativeArea\n         locality\n         dependentLocality\n         postalCode\n         sortingCode\n         addressLine1\n         addressLine2\n         organization\n         givenName\n         additionalName\n         familyName\n       }\n        fieldCapacity\n      }\n    }\n  }\n}`;\n\n  useEffect(() => {\n    const fetchData = () => {\n      axios.post(`http://trainingcontent.embl.org.docker.localhost:32771/graphql`, { query })\n      .then(res => {\n        console.log(res.data);\n        setList(res.data);\n      })\n    }\n    fetchData();\n    \n  }, []);\n\n  const formatDate = (date) => {\n      let finalDate = '';\n      let date1 = new Date(date.startDate);\n      let date2 = new Date(date.endDate);\n      let day1 = date1.getDate();\n      let day2 = date2.getDate();\n      let ordinal1 = getDateOrdinal(day1);\n      let ordinal2 = getDateOrdinal(day2);\n      let month1 = date1.toLocaleString('default', { month: 'short' });\n      let month2 = date2.toLocaleString('default', { month: 'short' });\n      let year1 = date1.getFullYear();\n      let year2 = date2.getFullYear();\n\n      if(day1 == day2 && month1 == month2 && year1 == year2){\n        finalDate = ordinal1  + \" \" + month1 + \" \" + year1;\n        return finalDate;\n      }\n\n      if(year1 == year2){\n        if(month1 == month2){\n          finalDate = ordinal1 + \" - \" + ordinal2 + \" \" + month1 + \" \" + year1;\n          return finalDate;\n        }else{\n          finalDate = ordinal1 + \" \" + month1 + \" - \" + ordinal2 + \" \" + month2 + \" \" + year1;\n          return finalDate;\n        }\n      }else{\n        finalDate = ordinal1 + \" \" + month1 + \" \" + year1 + \" - \" + ordinal2 + \" \" + month2 + \" \" + year2;\n          return finalDate;\n      }\n    \n  }\n\n  const getDateOrdinal = (n) => { \n    return n + (n > 0 ? ['th', 'st', 'nd', 'rd'][(n > 3 && n < 21) || n % 10 > 3 ? 0 : n % 10] : '');\n  }\n\n  const formatRegistration = (deadline) => {\n    let today = new Date(Date.now());\n\n    let lastDate = new Date(deadline.date);\n    let day = lastDate.getDate();\n    let ordinal = getDateOrdinal(day);\n    let month = lastDate.toLocaleString('default', { month: 'short' });\n    let year = lastDate.getFullYear();\n    let RegistrationClearDate = ordinal + \" \"+ month + \" \" + year;\n    // compare Registration deadline with today \n    if(today <= lastDate){\n      return \"Registration deadline: \" +  RegistrationClearDate ;\n    }else{\n      return \"Registration closed\";\n    }\n  }\n\n  const formatVenue = (venue) => {\n     return venue.organization +\", \" + \"United Kingdom\" ;\n  }\n\n  const showF2FEvents = () => {\n    if(list){\n    return  list.data.nodeQuery.entities.map((entity, key) => {\n        if(entity.entityBundle == 'course'){\n          return  <article key={key}>\n                    <h5><a href=\"#\" className=\"vf-link vf-link--primary\"> { entity.entityLabel }</a> </h5> \n                    <p>{formatDate(entity.fieldStartEndDate)} </p>\n                    <p>{entity.fieldVenue?formatVenue(entity.fieldVenue):''}</p>\n                    <p>{entity.fieldRegistrationDeadline?formatRegistration(entity.fieldRegistrationDeadline):''}</p>\n                  </article>\n        }\n      })\n    }\n  }\n\n  const showOnlineEvents = () => {\n    if(list){\n    return  list.data.nodeQuery.entities.map((entity, key) => {\n        if(entity.entityBundle == 'online_event'){\n          return  <p key={key}>{ entity.entityLabel } {entity.entityBundle}</p>\n        }\n      })\n    }\n  }\n\n\n\n\n\n  \n  return (\n    <div className=\"row\">\n    <div className=\"vf-u-margin__top--lg\"></div>\n    <div className=\"vf-u-margin__top--lg\"></div>\n      <div className=\"embl-grid\">\n        <div className=\"vf-section-header\">\n          <h5>Train onsite at EMBL-EBI</h5>\n        </div>\n        <div className=\"vf-section-content\">\n          <div className=\"vf-grid vf-grid__col-3\">\n            {showF2FEvents()}\n\n          </div>\n        </div>\n      </div>\n\n     \n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport {\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nconst Events = (props) => {\n\n\tconst [events, setEvents] = useState(0);\n\tconst [filteredEvents, setFilteredEvents] = useState();\n\tlet keyword = props.keyword;\n\tlet type = props.type;\n  let apiUrlLocal = 'http://trainingcontent.embl.org.docker.localhost:32769';\n  let apiUrlDev = 'https://dev.trainingcontent.embl.org';\n\n\tuseEffect(()  => {\n\t\tif(!events){\n\t\t\taxios.get(`${apiUrlDev}/apitest/ebi-training/events?_format=json&time${Date.now()}`)\n\t\t    .then(response => {\n\t\t    \tsetEvents(response.data)\n\t\t    \tsetFilteredEvents(response.data)\n\t\t    })\n\t\t}\n\n\t\tif(keyword){\n    \t\tlet temp = events.filter(event =>  event.title.toLowerCase().includes(keyword.toLowerCase()))\n    \t\tsetFilteredEvents(temp)\n    \t}else{\n    \t \tsetFilteredEvents(events)\n    \t}\n\n\n    \t// if(keyword && type){\n    \t// \tlet temp = events.filter(event =>  \n\n    \t// \t\t\t\tevent.title.toLowerCase().includes(keyword.toLowerCase())\n    \t\t\t\n    \t// \t)\n    \t// \tsetFilteredEvents(temp)\n    \t// \tconsole.log('keyword and type both')\n    \t// }else{\n    \t//  \tsetFilteredEvents(events)\n    \t// }\n\n    \t// else{\n    \t// \tsetFilteredEvents(events)\n    \t// }\n\n    // \tif(type){\n    // \t\tif(type == 'All'){\n    // \t\t\tsetFilteredEvents(events)\n    // \t\t}else{\n    // \t\t\tlet temp = events.filter(event =>  event.event_type == type)\n\t\t\t\t// setFilteredEvents(temp)\n    // \t\t}\n    \t\t\n    // \t}else{\n    // \t \tsetFilteredEvents(events)\n    // \t}\n\n    \t// else{\n    \t// \tsetFilteredEvents(events)\n    \t// }\n\n  \t},[keyword, type]);\n\n  \tconst getRegistration = (id) => {\n  \t\tlet event = events.filter(event => event.id == id)\n  \t\tif(event[0].event_type == 'Onsite' || event[0].event_type == 'Offsite'){\n  \t\t\tif(event[0].registration.status == 'closed'){\n  \t\t\t\treturn '<span class=\"text-danger\"> Registration Closed </span>';\n  \t\t\t}\n\n  \t\t\tif(event[0].registration.status == 'register_interest'){\n  \t\t\t\treturn '<a href=\"mailto:'+event[0].registration.register_interest_email+'\" class=\"vf-button vf-button--primary vf-button--sm | vf-button--show-hide\"> Register Interest</a>';\n  \t\t\t}\n\n  \t\t\tif(event[0].registration.status == 'open'){\n  \t\t\t\treturn '<a href=\"'+event[0].registration.link+'\" class=\"vf-button vf-button--primary vf-button--sm | vf-button--show-hide\"> Register Now</a>';\n  \t\t\t}\n  \t\t\t\n  \t\t}\n\n  \t}\n\n\n\treturn (\n\t\t\t<div>\n\t\t\t{console.log(filteredEvents)}\n\t\t\n\t\t\t\t{\n\t\t\t\t\tfilteredEvents?\n\t\t\t\t\t\tfilteredEvents.map(event => \n\t\t\t\t\t\t\t<div className='eventsCard' >\n\t\t\t\t\t\t\t\t<h3>{event.title}</h3>\n\t\t\t\t\t\t\t\t<div className='eventOverview'>{ReactHtmlParser(event.overview.substring(0,220))}</div>\n\t\t\t\t\t\t\t\t<div className='keyinfo'>\n\t\t\t\t\t\t\t\t\t<div className='keyinfo-dates'>\n\t\t\t\t\t\t\t\t\t\t<div className='eventLocation'><i class=\"icon icon-common icon-location\"></i> {event.location}</div>\n\t\t\t\t\t\t\t\t\t\t<div className='eventDates'><i class=\"icon icon-common icon-calendar-alt\"></i> {event.event_date_formatted} </div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className='registerbutton'>{ReactHtmlParser(getRegistration(event.id))}</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\n\n\t\t\t\t\t:\n\t\t\t\t\t'Loading events'\n\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n}\n\nexport default Events;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport {\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nconst OnlineEvents = (props) => {\n\n\tconst [courses, setCourses] = useState(0);\n\tconst [filteredCourses, setFilteredCourses] = useState();\n\tlet keyword = props.keyword;\n\tlet apiUrlLocal = 'http://trainingcontent.embl.org.docker.localhost:32769';\n\tlet apiUrlDev = 'https://dev.trainingcontent.embl.org';\n\n\tuseEffect(()  => {\n\t\tif(!courses){\n\t\t\taxios.get(`${apiUrlDev}/apitest/ebi-training/online-courses?_format=json&time${Date.now()}`)\n\t\t    .then(response => {\n\t\t    \tsetCourses(response.data)\n\t\t    \tsetFilteredCourses(response.data)\n\t\t    })\n\t\t}\n\n    \tif(keyword){\n    \t\tlet temp = courses.filter(course =>  course.title.toLowerCase().includes(keyword))\n    \t\tsetFilteredCourses(temp)\n    \t\t\n    \t}else{\n    \t\tsetFilteredCourses(courses)\n    \t}\n\n  \t},[keyword]);\n\n\n\treturn (\n\t\t\t<>\n\t\t\t\t{\n\t\t\t\t\tfilteredCourses?\n\t\t\t\t\t\tfilteredCourses.map(course => \n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div className='BooksCard column'>\n\t\t\t\t\t\t\t\t\t<div className='book_cover_image_container'>\n\t\t\t\t\t\t\t\t\t\t<img src={course.course_image[0].url} className='book_cover_image' />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className='book_overview_container'>\n\t\t\t\t\t\t\t\t\t\t<h5>{course.title}</h5>\n\t\t\t\t\t\t\t\t\t\t<div className='book_overview'>{course.overview?ReactHtmlParser(course.overview.substring(0,200)):''}</div>\n\t\t\t\t\t\t\t\t\t\t<div className='book_icons'>\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"icon icon-common icon-clock\"></i> {course.time_to_complete}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t)\n\n\n\t\t\t\t\t:\n\t\t\t\t\t'Loading online courses'\n\n\t\t\t\t}\n\t\t\t</>\n\t\t)\n}\n\nexport default OnlineEvents;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport {\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Events from './Events';\nimport OnlineCourses from './OnlineCourses';\nimport card8 from './images/card8.png';\nimport cabana from './images/cabana.png';\nimport corbel from './images/corbel.png';\nimport ritrain from './images/ritrain.png';\n\nconst Home = () => {\n\n\tconst [keyword, setKeyword] = useState();\n\tconst [type, setType] = useState();\n\n\tconst handleSearch = (e) => {\n\t\tsetKeyword(e.target.value);\n\t}\n\n\tconst handleSelect = (e) => {\n\t\tsetType(e.target.value);\n\t\tconsole.log(e.target.value)\n\t}\n\n\tconst bgStyle = {\n\t\tbackgroundImage: 'Url(/images/1.jpeg)',\t\n\t\tbackgroundSize: 'cover',\n\t\tbackgroundPosition:'top',\n\t\tminHeight: '600px',\n\t\tposition: 'relative',\n\t}\n\n\treturn (\n\t\t\t<div >\n\t\t\t\t<div data-vf-js-masthead=\"\" className=\"vf-masthead vf-hero--intense\" style={bgStyle} >\n\t\t\t\t\t<div className='vf-body'>\n\t\t\t\t\t\t<div className='embl-grid' style={{marginBottom:'0px'}} >\n\t\t\t\t\t\t\t<div></div>\n\n\t\t\t\t\t\t\t<div className='hero-image-search acc'>\n\t\t\t\t\t\t\t\t<h1 style={{color:'white'}}>EMBL-EBI Training</h1>\n\t\t\t\t\t\t\t\t<form role='search'>\n\t\t\t\t\t\t\t\t<div className='input-group'>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<label class=\"search-label\" for=\"search_box\" aria-labelledby=\"searchTitle\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"icon icon-common icon-search icon-search-custom\">\n\t\t\t\t\t\t\t\t\t\t\t\t<title id=\"searchTitle\">Search</title>\n\t\t\t\t\t\t\t\t\t\t\t</i>\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t<input id=\"search_box\"  onChange={ e => handleSearch(e) } type='search' className='hero-image-input' \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Search keyword' />\n\t\t\t\t\t\t\t\t\t\t<select onChange={ e => handleSelect(e) }>\n\t\t\t\t\t\t\t\t\t\t\t<option value='All'>Type - All</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value='Onsite'>Onsite - In person at EMBL-EBI</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value='Offsite'>Offsite - At your institute</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value='Online-event'>Online Events - Live webinars or remote classrooms</option>\n\t\t\t\t\t\t\t\t\t\t\t<option value='Online-courses'>Online Courses - Instant and freely available</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\n\n\t\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t<div className='vf-body'>\t\n\t\t\t\t\t<div className='embl-grid'>\n\t\t\t\t\t\t<div class=\"vf-section-header__heading\" style={{marginTop:'30px'}} >Training Events</div>\n\t\t\t\t\t\t<div className='acc'>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<Events keyword={keyword} type={type} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='embl-grid'>\t\n\t\t\t\t\t\t<div class=\"vf-section-header__heading\" style={{marginTop:'30px'}} >Online Courses</div>\n\t\t\t\t\t\t<div className='acc'>\n\t\t\t\t\t\t\t<div className='vf-grid vf-grid__col-2'>\t<OnlineCourses keyword={keyword} type={type} /></div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\t\t\n\n\n\n\t\t\t\t\n\n\t\t\t</div>\n\n\t\t)\n}\n\nexport const pathVariable = () => (\n  <Switch>\n    <Route\n      exact\n      path=\"/\"\n      component={Home}\n    />\n  </Switch>\n);\n\nexport default pathVariable;","import React, { Component } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Home from './Home';\n\n\nconst Root = () => {\n\treturn(\n\t\t\t<Switch>\n\t\t\t\t<Route\n                  path=\"/\"\n                  component={Home}\n                />\n\n\n\t\t\t</Switch>\n\n\t\t)\n}\n\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Root from './Root';\n\nconst root = document.getElementById('root');\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Root />\n  </BrowserRouter>,\n  root\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}